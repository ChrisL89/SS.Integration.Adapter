// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18063
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SS.Integration.Adapter.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("MarketState")]
    public partial class MarketStateFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "MarketState.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "MarketState", "In order to avoid silly mistakes\r\nAs a developer\r\nI want to make sure that market" +
                    "s\' state are correctly computed by looking at the selections", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Compute Market Tradability (all selection must be pending in order to put the mar" +
            "ket in a pending state)")]
        [NUnit.Framework.CategoryAttribute("MarketStateComputation")]
        public virtual void ComputeMarketTradabilityAllSelectionMustBePendingInOrderToPutTheMarketInAPendingState()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Compute Market Tradability (all selection must be pending in order to put the mar" +
                    "ket in a pending state)", new string[] {
                        "MarketStateComputation"});
#line 15
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Property",
                        "Value"});
            table1.AddRow(new string[] {
                        "Id",
                        "\"ABC\""});
#line 16
 testRunner.Given("I have this market", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Selection",
                        "Status",
                        "Tradability",
                        "Price"});
            table2.AddRow(new string[] {
                        "1",
                        "0",
                        "0",
                        "-1"});
            table2.AddRow(new string[] {
                        "2",
                        "0",
                        "0",
                        "0"});
            table2.AddRow(new string[] {
                        "3",
                        "0",
                        "0",
                        "1"});
            table2.AddRow(new string[] {
                        "4",
                        "0",
                        "0",
                        "2"});
#line 19
 testRunner.And("The market has these selections", ((string)(null)), table2, "And ");
#line 25
 testRunner.When("I infer the market\'s status", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Active",
                        "Pending",
                        "Suspended",
                        "Resulted"});
            table3.AddRow(new string[] {
                        "0",
                        "1",
                        "1",
                        "0"});
#line 26
 testRunner.Then("I should have these values", ((string)(null)), table3, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Property",
                        "Value"});
            table4.AddRow(new string[] {
                        "Id",
                        "\"ABC\""});
#line 29
 testRunner.Given("I have this market", ((string)(null)), table4, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Selection",
                        "Status",
                        "Tradability",
                        "Price"});
            table5.AddRow(new string[] {
                        "1",
                        "1",
                        "1",
                        "-1"});
            table5.AddRow(new string[] {
                        "2",
                        "0",
                        "1",
                        "0"});
            table5.AddRow(new string[] {
                        "3",
                        "0",
                        "1",
                        "1"});
            table5.AddRow(new string[] {
                        "4",
                        "0",
                        "1",
                        "2"});
#line 32
 testRunner.And("The market has these selections", ((string)(null)), table5, "And ");
#line 38
 testRunner.When("I infer the market\'s status", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Active",
                        "Pending",
                        "Suspended",
                        "Resulted"});
            table6.AddRow(new string[] {
                        "1",
                        "0",
                        "0",
                        "0"});
#line 39
 testRunner.Then("I should have these values", ((string)(null)), table6, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Compute Market Tradability (tradability IS considered for suspension)")]
        public virtual void ComputeMarketTradabilityTradabilityISConsideredForSuspension()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Compute Market Tradability (tradability IS considered for suspension)", ((string[])(null)));
#line 44
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Property",
                        "Value"});
            table7.AddRow(new string[] {
                        "Id",
                        "\"1\""});
#line 45
 testRunner.Given("I have this market", ((string)(null)), table7, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Selection",
                        "Status",
                        "Tradability",
                        "Price"});
            table8.AddRow(new string[] {
                        "1",
                        "1",
                        "1",
                        "-1"});
            table8.AddRow(new string[] {
                        "2",
                        "1",
                        "1",
                        "0"});
            table8.AddRow(new string[] {
                        "3",
                        "1",
                        "1",
                        "1"});
            table8.AddRow(new string[] {
                        "4",
                        "1",
                        "1",
                        "2"});
#line 48
 testRunner.And("The market has these selections", ((string)(null)), table8, "And ");
#line 54
 testRunner.When("I infer the market\'s status", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Active",
                        "Pending",
                        "Suspended",
                        "Resulted"});
            table9.AddRow(new string[] {
                        "1",
                        "0",
                        "0",
                        "0"});
#line 55
 testRunner.Then("I should have these values", ((string)(null)), table9, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Property",
                        "Value"});
            table10.AddRow(new string[] {
                        "Id",
                        "\"2\""});
#line 58
 testRunner.Given("I have this market", ((string)(null)), table10, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Selection",
                        "Status",
                        "Tradability",
                        "Price"});
            table11.AddRow(new string[] {
                        "1",
                        "1",
                        "1",
                        "-1"});
            table11.AddRow(new string[] {
                        "2",
                        "1",
                        "1",
                        "0"});
            table11.AddRow(new string[] {
                        "3",
                        "1",
                        "1",
                        "1"});
            table11.AddRow(new string[] {
                        "4",
                        "1",
                        "0",
                        "2"});
#line 61
 testRunner.And("The market has these selections", ((string)(null)), table11, "And ");
#line 68
 testRunner.When("I infer the market\'s status", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Active",
                        "Pending",
                        "Suspended",
                        "Resulted"});
            table12.AddRow(new string[] {
                        "1",
                        "0",
                        "0",
                        "0"});
#line 69
 testRunner.Then("I should have these values", ((string)(null)), table12, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Property",
                        "Value"});
            table13.AddRow(new string[] {
                        "Id",
                        "\"3\""});
#line 72
 testRunner.Given("I have this market", ((string)(null)), table13, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Selection",
                        "Status",
                        "Tradability",
                        "Price"});
            table14.AddRow(new string[] {
                        "1",
                        "1",
                        "0",
                        "-1"});
            table14.AddRow(new string[] {
                        "2",
                        "1",
                        "0",
                        "0"});
            table14.AddRow(new string[] {
                        "3",
                        "1",
                        "0",
                        "1"});
            table14.AddRow(new string[] {
                        "4",
                        "1",
                        "0",
                        "2"});
#line 75
 testRunner.And("The market has these selections", ((string)(null)), table14, "And ");
#line 82
 testRunner.When("I infer the market\'s status", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Active",
                        "Pending",
                        "Suspended",
                        "Resulted"});
            table15.AddRow(new string[] {
                        "1",
                        "0",
                        "1",
                        "0"});
#line 83
 testRunner.Then("I should have these values", ((string)(null)), table15, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Compute Market Tradability (one active selection is enough to make the market act" +
            "ive)")]
        public virtual void ComputeMarketTradabilityOneActiveSelectionIsEnoughToMakeTheMarketActive()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Compute Market Tradability (one active selection is enough to make the market act" +
                    "ive)", ((string[])(null)));
#line 87
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Property",
                        "Value"});
            table16.AddRow(new string[] {
                        "Id",
                        "\"ABC\""});
#line 88
 testRunner.Given("I have this market", ((string)(null)), table16, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Selection",
                        "Status",
                        "Tradability",
                        "Price"});
            table17.AddRow(new string[] {
                        "1",
                        "1",
                        "0",
                        "-1"});
            table17.AddRow(new string[] {
                        "2",
                        "0",
                        "0",
                        "0"});
            table17.AddRow(new string[] {
                        "3",
                        "0",
                        "0",
                        "1"});
            table17.AddRow(new string[] {
                        "4",
                        "0",
                        "0",
                        "2"});
#line 91
 testRunner.And("The market has these selections", ((string)(null)), table17, "And ");
#line 97
 testRunner.When("I infer the market\'s status", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Active",
                        "Pending",
                        "Suspended",
                        "Resulted"});
            table18.AddRow(new string[] {
                        "1",
                        "0",
                        "1",
                        "0"});
#line 98
 testRunner.Then("I should have these values", ((string)(null)), table18, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Property",
                        "Value"});
            table19.AddRow(new string[] {
                        "Id",
                        "\"ABC\""});
#line 101
 testRunner.Given("I have this market", ((string)(null)), table19, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Selection",
                        "Status",
                        "Tradability",
                        "Price"});
            table20.AddRow(new string[] {
                        "1",
                        "1",
                        "1",
                        "-1"});
            table20.AddRow(new string[] {
                        "2",
                        "0",
                        "0",
                        "0"});
            table20.AddRow(new string[] {
                        "3",
                        "0",
                        "0",
                        "1"});
            table20.AddRow(new string[] {
                        "4",
                        "0",
                        "0",
                        "2"});
#line 104
 testRunner.And("The market has these selections", ((string)(null)), table20, "And ");
#line 110
 testRunner.When("I infer the market\'s status", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "Active",
                        "Pending",
                        "Suspended",
                        "Resulted"});
            table21.AddRow(new string[] {
                        "1",
                        "0",
                        "0",
                        "0"});
#line 111
 testRunner.Then("I should have these values", ((string)(null)), table21, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "Property",
                        "Value"});
            table22.AddRow(new string[] {
                        "Id",
                        "\"ABC\""});
#line 114
 testRunner.Given("I have this market", ((string)(null)), table22, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "Selection",
                        "Status",
                        "Tradability",
                        "Price"});
            table23.AddRow(new string[] {
                        "1",
                        "1",
                        "1",
                        "-1"});
            table23.AddRow(new string[] {
                        "2",
                        "2",
                        "0",
                        "0"});
            table23.AddRow(new string[] {
                        "3",
                        "3",
                        "0",
                        "1"});
            table23.AddRow(new string[] {
                        "4",
                        "0",
                        "0",
                        "2"});
#line 117
 testRunner.And("The market has these selections", ((string)(null)), table23, "And ");
#line 123
 testRunner.When("I infer the market\'s status", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "Active",
                        "Pending",
                        "Suspended",
                        "Resulted"});
            table24.AddRow(new string[] {
                        "1",
                        "0",
                        "0",
                        "0"});
#line 124
 testRunner.Then("I should have these values", ((string)(null)), table24, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Compute Market Tradability (resulted look at the selection price)")]
        public virtual void ComputeMarketTradabilityResultedLookAtTheSelectionPrice()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Compute Market Tradability (resulted look at the selection price)", ((string[])(null)));
#line 129
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "Property",
                        "Value"});
            table25.AddRow(new string[] {
                        "Id",
                        "\"ABC\""});
#line 130
 testRunner.Given("I have this market", ((string)(null)), table25, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "Selection",
                        "Status",
                        "Tradability",
                        "Price"});
            table26.AddRow(new string[] {
                        "1",
                        "3",
                        "0",
                        "-1"});
            table26.AddRow(new string[] {
                        "2",
                        "3",
                        "0",
                        "0"});
            table26.AddRow(new string[] {
                        "3",
                        "3",
                        "0",
                        "1"});
            table26.AddRow(new string[] {
                        "4",
                        "3",
                        "0",
                        "2"});
#line 133
 testRunner.And("The market has these selections", ((string)(null)), table26, "And ");
#line 139
 testRunner.When("I infer the market\'s status", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "Active",
                        "Pending",
                        "Suspended",
                        "Resulted"});
            table27.AddRow(new string[] {
                        "0",
                        "0",
                        "1",
                        "1"});
#line 140
 testRunner.Then("I should have these values", ((string)(null)), table27, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "Property",
                        "Value"});
            table28.AddRow(new string[] {
                        "Id",
                        "\"ABC\""});
#line 143
 testRunner.Given("I have this market", ((string)(null)), table28, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "Selection",
                        "Status",
                        "Tradability",
                        "Price"});
            table29.AddRow(new string[] {
                        "1",
                        "3",
                        "1",
                        "-1"});
            table29.AddRow(new string[] {
                        "2",
                        "3",
                        "1",
                        "0"});
            table29.AddRow(new string[] {
                        "3",
                        "3",
                        "1",
                        "1"});
            table29.AddRow(new string[] {
                        "4",
                        "3",
                        "1",
                        "2"});
#line 146
 testRunner.And("The market has these selections", ((string)(null)), table29, "And ");
#line 152
 testRunner.When("I infer the market\'s status", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "Active",
                        "Pending",
                        "Suspended",
                        "Resulted"});
            table30.AddRow(new string[] {
                        "0",
                        "0",
                        "1",
                        "1"});
#line 153
 testRunner.Then("I should have these values", ((string)(null)), table30, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "Property",
                        "Value"});
            table31.AddRow(new string[] {
                        "Id",
                        "\"ABC\""});
#line 156
 testRunner.Given("I have this market", ((string)(null)), table31, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        "Selection",
                        "Status",
                        "Tradability",
                        "Price"});
            table32.AddRow(new string[] {
                        "1",
                        "1",
                        "1",
                        "-1"});
            table32.AddRow(new string[] {
                        "2",
                        "1",
                        "1",
                        "0"});
            table32.AddRow(new string[] {
                        "3",
                        "1",
                        "1",
                        "1"});
            table32.AddRow(new string[] {
                        "4",
                        "2",
                        "1",
                        "2"});
#line 159
 testRunner.And("The market has these selections", ((string)(null)), table32, "And ");
#line 165
 testRunner.When("I infer the market\'s status", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                        "Active",
                        "Pending",
                        "Suspended",
                        "Resulted"});
            table33.AddRow(new string[] {
                        "1",
                        "0",
                        "0",
                        "0"});
#line 166
 testRunner.Then("I should have these values", ((string)(null)), table33, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                        "Property",
                        "Value"});
            table34.AddRow(new string[] {
                        "Id",
                        "\"ABC\""});
#line 169
 testRunner.Given("I have this market", ((string)(null)), table34, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                        "Selection",
                        "Status",
                        "Tradability",
                        "Price"});
            table35.AddRow(new string[] {
                        "1",
                        "1",
                        "1",
                        "-1"});
            table35.AddRow(new string[] {
                        "2",
                        "1",
                        "1",
                        "0"});
            table35.AddRow(new string[] {
                        "3",
                        "1",
                        "1",
                        "1"});
            table35.AddRow(new string[] {
                        "4",
                        "2",
                        "1",
                        "1"});
#line 172
 testRunner.And("The market has these selections", ((string)(null)), table35, "And ");
#line 178
 testRunner.When("I infer the market\'s status", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                        "Active",
                        "Pending",
                        "Suspended",
                        "Resulted"});
            table36.AddRow(new string[] {
                        "1",
                        "0",
                        "0",
                        "0"});
#line 179
 testRunner.Then("I should have these values", ((string)(null)), table36, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
